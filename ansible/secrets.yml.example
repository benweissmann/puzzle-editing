---
# Secrets that are scoped to different sets of servers.
# These are used for provision-time configuration and general setup.
#
# Edit the 'localdev' settings to affect your Vagrant VM.
# Edit the 'prod' settings for production.
servers:
  localdev:
    mysql_root_password: "yourDbPasswordInsideVagrantWhichProbablyDoesNotMatter"
  prod:
    # This domain is used to name various things in AWS, but more importantly
    # it is actually used to register DNS entries for your site in Amazon Route 53.
    # You need to register a domain, point it at Route 53 in your AWS account,
    # and then name that domain below.
    domain: example.org
    # MIT is closest to Amazon us-east-1, which is in Virginia.
    aws_region: us-east-1
    # To log into newly launched EC2 instances your user needs an SSH
    # keypair; name that here.
    aws_keypair: defaultpair
    mysql_root_password: "ChangeThisForSureItIsLiveInProduction"

# Secrets that are scoped to specific apps or instances of apps.
# Each "app" describes a "deploy", in 12-factor app terms:
# it tells where to get the code from and what values to bind to it
# when you're deploying it.
apps:
  # Settings for the Vagrant VM used in development.
  puzzletron-localdev:
    # THINGS THAT YOU DO NOT NEED TO EDIT
    #
    # For most apps, this is the Git branch or tag name where the code
    # to be deployed is found. It does not matter here in dev, where we
    # just run whatever code is in /vagrant at the time. Just
    # leave this set to the default.
    build_version: local
    # Name of the site, used inside various LAMP config files.
    name: puzzletron_dev
    # Domain name of the site: The URL, minus the 'http/https' part.
    url: puzzletron.vm
    # Should we restrict to HTTPS? In development, that's probably a 'no'.
    https_only: false
    # Where the code will be served from. Leave this set to '/vagrant'
    # in development.
    docroot: /vagrant
    # Unix user who will run PHP. Leave this set to 'ubuntu' in development.
    unix_username: ubuntu
    # Where Ansible should look for the file that needs to be run in
    # cron to send email.
    cronjob_path: email_cronjob.php
    # The name to apply to the email cron job in the crontab file.
    cronjob_name: "puzzletron-localdev outgoing email"
    # Where the app tries to store files. Vagrant sets this up for you.
    shared_storage_dir: /home/ubuntu/puzzletron-dev-storage
    # Where the app checks out code for build. This isn't done in development,
    # so just leave this set to /vagrant
    build_working_directory: /vagrant

    # THINGS THAT YOU WANT TO EDIT
    db_host: "localhost"
    db_name: "puzzletron_dev"
    db_username: "puzzletron_dev"
    db_password: "changeMeToARandomString"

    # The environment variables, below, control the application
    # settings. In development these are written to a /vagrant/.env
    # file, where you can tinker with them whenever you like and
    # observe the effects directly.
    #
    # Edit the environment below if you want to change the initial
    # settings in the .env file when Vagrant sets up a new VM.
    environment:
      - key: PTRON_TMPDIR
        value: "/home/ubuntu/puzzletron-dev-storage/tmp"
      - key: PTRON_SESSION_CACHE_DIR
        value: "/home/ubuntu/puzzletron-dev-storage/tmp"
      - key: PTRON_HTMLPURIFIER_CACHE_PATH
        value: "/home/ubuntu/puzzletron-dev-storage/tmp/purifier-cache"
      - key: PTRON_PICPATH
        value: "/home/ubuntu/puzzletron-dev-storage/uploads/pictures/"

        # These need to match the db_* settings given above
      - key: PTRON_DB_SERVER
        value: "localhost"
      - key: PTRON_DB_NAME
        value: "puzzletron_dev"
      - key: PTRON_DB_USER
        value: "puzzletron_dev"
      - key: PTRON_DB_PASSWORD
        value: "changeMeToARandomString"

      - key: PTRON_AWS_ACCESS_KEY_ID
        value: "someAWSAssignedRandomString"
      - key: PTRON_AWS_SECRET_ACCESS_KEY
        value: "someMuchLongerAWSAssignedRandomString"
      - key: PTRON_AWS_BUCKET
        value: "aBucketNameToStoreYourPuzzletronFiles"
      - key: PTRON_AWS_ENDPOINT
        value: "https://s3.amazonaws.com/"
      - key: PTRON_FROM_EMAIL
        value: "no-reply@example.org"
      - key: PTRON_URL
        value: "https://example.org/"
      - key: PTRON_POSTPROD_URLPREFIX
        value: "https://xxxmysteryhunt.com/"
      - key: PTRON_POSTPROD_BETA_URLPREFIX
        value: "https://xxxmysteryhunt.com/"
      - key: PTRON_PHPMYADMIN_URL
        value: "https://scripts.mit.edu/~sql/phpMyAdmin/"
      - key: PTRON_HELP_EMAIL
        value: "systems-help@example.org"
      - key: PTRON_WIKI_URL
        value: "https://sites.google.com/site/your-hunt-here"
      - key: PTRON_BUGTRACK_URL
        value: "https://github.com/mysteryhunt/puzzle-editing/issues"
      - key: PTRON_MAILGUN_API_URL
        value: "https://api.mailgun.net/v2/your.mail.domain.here.example.com"
      - key: PTRON_MAILGUN_API_KEY
        value: "key-3141592etcetc"
      - key: PTRON_TRUST_REMOTE_USER
        value: "FALSE"
      - key: PTRON_MIN_EDITORS
        value: "2"
      - key: PTRON_MIN_APPROVERS
        value: "2"
      - key: PTRON_HUNT_YEAR
        value: "2017"
      - key: PTRON_HUNT_DOM
        value: "13"
      - key: PTRON_DEVMODE
        value: "TRUE"
      - key: PTRON_PRACMODE
        value: "TRUE"
      - key: PTRON_ALLOW_TESTSOLVE_PICK
        value: "TRUE"
      - key: PTRON_ALLOW_EDITOR_PICK
        value: "TRUE"
      - key: PTRON_USING_TESTSOLVE_REQUESTS
        value: "FALSE"
      - key: PTRON_USING_TESTSOLVE_TEAMS
        value: "FALSE"
      - key: PTRON_USING_ROUND_CAPTAINS
        value: "FALSE"
      - key: PTRON_USING_APPROVERS
        value: "FALSE"
      - key: PTRON_USING_CREDITS
        value: "FALSE"
      - key: PTRON_USING_AWS
        value: "FALSE"
      - key: PTRON_ANON_TESTERS
        value: "FALSE"
      - key: PTRON_USING_CODENAMES
        value: "FALSE"
      - key: PTRON_UNZIP_ZIP_UPLOADS
        value: "TRUE"
      - key: PTRON_USING_PER_PUZZLE_TESTER_LIMITS
        value: "FALSE"
      - key: PTRON_MAILING_LISTS
        value: "FALSE"
      - key: PTRON_GET_KEYTAB
        value: "kinit -k -t KEYTAB_FILE PRINCIPAL"
      - key: PTRON_MMBLANCHE_CMD
        value: "athrun consult mmblanche"
      - key: PTRON_MMBLANCHE_PASSWORDS
        value: "PASSWORD_DIR"
      - key: PTRON_EDITOR_MAILING_LIST
        value: "EDITOR_LIST"

  # Copy the following section, then edit it, for all the versions of the app
  # that you want to deploy on AWS.
  puzzletron-stg:
    # The Git branch or tag name where the code
    # to be deployed is found. This will be checked out into the
    # build_working_directory named below, then built.
    build_version: master
    # Name of the site, used inside various LAMP config files.
    name: puzzletron
    # Domain name of the site: The URL, minus the 'http/https' part.
    url: puzzletron.example.org
    # Should we restrict to HTTPS? Highly recommended in production.
    https_only: true
    # Parent directory, inside of which docroot directories will be
    # created. If you change the build_version, you get a new
    # subdirectory inside docroots_directory.
    docroots_directory: /var/www/puzzletron
    # Unix user who will run PHP. Will be created if needed. Use a different
    # user for each running copy of the app.
    unix_username: ptprod
    # Where Ansible should look for the file that needs to be run in
    # cron to send email.
    cronjob_path: email_cronjob.php
    # The name to apply to the email cron job in the crontab file.
    cronjob_name: "puzzletron outgoing email"
    # Where the app tries to store files. Vagrant sets this up for you.
    shared_storage_dir: /home/ubuntu/puzzletron-storage
    # Where the app checks out code for build.
    build_working_directory: /home/ubuntu/puzzletron-build

    # In production we wrap HTTP Basic auth around everything just to
    # keep prying eyes and bots away from the site. This is not
    # high-security but it is a privacy screen.
    #
    # Encrypt a password using `htpasswd -n`, paste the encrypted
    # version below, then distribute the password to everyone on your
    # team using something like a Google doc, or Slack.
    htpasswd_authname: "amazingWritingTeamFor2017"
    htpasswd_passwords: >-
      amazingWritingTeamFor2017:$apr1$R8./3izl$b.4cR.io/sbYF5X1u8jR60

    # DB connection information. You need to enter this a second time, below.
    db_host: "localhost"
    db_name: "puzzletron"
    db_username: "puzzletron"
    db_password: "changeMeToARandomStringSeriouslyThisIsProduction"

    # The environment variables, below, control the application
    # settings. In production these are written into the Apache
    # config file, from which they pass into PHP when Apache starts PHP.
    environment:
      - key: PTRON_TMPDIR
        value: "/home/ubuntu/puzzletron-dev-storage/tmp"
      - key: PTRON_SESSION_CACHE_DIR
        value: "/home/ubuntu/puzzletron-dev-storage/tmp"
      - key: PTRON_HTMLPURIFIER_CACHE_PATH
        value: "/home/ubuntu/puzzletron-dev-storage/tmp/purifier-cache"
      - key: PTRON_PICPATH
        value: "/home/ubuntu/puzzletron-dev-storage/uploads/pictures/"

        # These need to match the db_* settings given above
      - key: PTRON_DB_SERVER
        value: "localhost"
      - key: PTRON_DB_NAME
        value: "puzzletron_dev"
      - key: PTRON_DB_USER
        value: "puzzletron_dev"
      - key: PTRON_DB_PASSWORD
        value: "changeMeToARandomString"

      - key: PTRON_AWS_ACCESS_KEY_ID
        value: "someAWSAssignedRandomString"
      - key: PTRON_AWS_SECRET_ACCESS_KEY
        value: "someMuchLongerAWSAssignedRandomString"
      - key: PTRON_AWS_BUCKET
        value: "aBucketNameToStoreYourPuzzletronFiles"
      - key: PTRON_AWS_ENDPOINT
        value: "https://s3.amazonaws.com/"
      - key: PTRON_FROM_EMAIL
        value: "no-reply@example.org"
      - key: PTRON_URL
        value: "https://example.org/"
      - key: PTRON_POSTPROD_URLPREFIX
        value: "https://xxxmysteryhunt.com/"
      - key: PTRON_POSTPROD_BETA_URLPREFIX
        value: "https://xxxmysteryhunt.com/"
      - key: PTRON_PHPMYADMIN_URL
        value: "https://scripts.mit.edu/~sql/phpMyAdmin/"
      - key: PTRON_HELP_EMAIL
        value: "systems-help@example.org"
      - key: PTRON_WIKI_URL
        value: "https://sites.google.com/site/your-hunt-here"
      - key: PTRON_BUGTRACK_URL
        value: "https://github.com/mysteryhunt/puzzle-editing/issues"
      - key: PTRON_MAILGUN_API_URL
        value: "https://api.mailgun.net/v2/your.mail.domain.here.example.com"
      - key: PTRON_MAILGUN_API_KEY
        value: "key-3141592etcetc"
      - key: PTRON_TRUST_REMOTE_USER
        value: "FALSE"
      - key: PTRON_MIN_EDITORS
        value: "2"
      - key: PTRON_MIN_APPROVERS
        value: "2"
      - key: PTRON_HUNT_YEAR
        value: "2017"
      - key: PTRON_HUNT_DOM
        value: "13"
      - key: PTRON_DEVMODE
        value: "TRUE"
      - key: PTRON_PRACMODE
        value: "TRUE"
      - key: PTRON_ALLOW_TESTSOLVE_PICK
        value: "TRUE"
      - key: PTRON_ALLOW_EDITOR_PICK
        value: "TRUE"
      - key: PTRON_USING_TESTSOLVE_REQUESTS
        value: "FALSE"
      - key: PTRON_USING_TESTSOLVE_TEAMS
        value: "FALSE"
      - key: PTRON_USING_ROUND_CAPTAINS
        value: "FALSE"
      - key: PTRON_USING_APPROVERS
        value: "FALSE"
      - key: PTRON_USING_CREDITS
        value: "FALSE"
      - key: PTRON_USING_AWS
        value: "FALSE"
      - key: PTRON_ANON_TESTERS
        value: "FALSE"
      - key: PTRON_USING_CODENAMES
        value: "FALSE"
      - key: PTRON_UNZIP_ZIP_UPLOADS
        value: "TRUE"
      - key: PTRON_USING_PER_PUZZLE_TESTER_LIMITS
        value: "FALSE"
      - key: PTRON_MAILING_LISTS
        value: "FALSE"
      - key: PTRON_GET_KEYTAB
        value: "kinit -k -t KEYTAB_FILE PRINCIPAL"
      - key: PTRON_MMBLANCHE_CMD
        value: "athrun consult mmblanche"
      - key: PTRON_MMBLANCHE_PASSWORDS
        value: "PASSWORD_DIR"
      - key: PTRON_EDITOR_MAILING_LIST
        value: "EDITOR_LIST"

    # Your code will be checked out from a Git server on each deploy,
    # then built. The URL for the checkout goes here:
    git_repo_url: "git@github.com:mechfish/puzzle-editing.git"
    # The private half of the SSH key used for deploying the code goes
    # here. (Yes, the PRIVATE half, that is why this file is called
    # 'secrets'.) You should generate an SSH key that is used for this
    # and only this.
    #
    # THE KEY BELOW IS FAKE AND WILL NOT WORK.
    git_deploy_key_private: |
      -----BEGIN RSA PRIVATE KEY-----
      AAAABBBBBHighSecurityThisIsSuperHighSecurityYouKnowItIsSecureBec
      auseItLooksSoCrazyRandomabkdjlkjlkjlksajkjdfjsjfljslkjlskjfkjlsf
      lsjflksjfkjlsjlfkjsfsklfjdjfNoSeriouslyYouShouldUsessh-keygenToM
      akeThisReadTheGithubDocsOrSomethingAndYesOneNiceThingAboutYAMLFi
      lesIsThatTheySupportSeriouslyGiganticMultilineStringsThisIsActua
      llyWayShorterThanTheRealThingWillBeNowForMoreRandomness879347987
      9879721927319873zzzaljsldkfjlijlwijelijafl;kaj;kbbbmbbm,mmbmolii
      -----END RSA PRIVATE KEY-----

    # When the deploy script goes to check out your code from the git_repo_url it will
    # complain that it cannot verify the host key... unless you paste the host
    # key here along with the servername it applies to.
    git_server_hostname: "github.com"
    # THE KEY BELOW IS FAKE AND WILL NOT WORK. Get the real key from a
    # ~/.ssh/known_hosts file on a machine where you did a checkout.
    git_server_host_key: >
      github.com ssh-rsa AAAABHmmmIfIPutGithubsRealHostKeyHereWouldThatBeSomeKindOfSecurityProblemIReallyAmNotSureYouCanJustDownloadTheStupidThingButISupposeItMightGetStaleSoYouShouldLookItUpWhenYouCopyThisFileOfCourseMostPeopleDoNotBotherPuttingThisSortOfThingInTheCodeTheyJustSayOhWhateverAndTurnKeyCheckingOffIShouldProbablyHaveJustDoneThatlksjfksjlksjlkfjsdjfsj

    # To set up SSL in production you need to install keys. The good
    # news is that the key installation into Apache is automated here;
    # the bad news is that you need to buy or generate a cert and a
    # key and put them in this file, below.
    #
    # Note that anyone who has this cert and key can impersonate your
    # website to any browser. Keep this file secret!
    ssl_cert: |
      -----BEGIN CERTIFICATE-----
      ThisShouldActuallyBeYourSiteCert
      -----END CERTIFICATE-----
      -----BEGIN CERTIFICATE-----
      TheCertChainGoesDownwardsTowardTheRootSoThisMightBeYourCAInterme
      diateCert
      -----END CERTIFICATE-----
      -----BEGIN CERTIFICATE-----
      AndSoOnDownTheChainOfCertsThatYourCASentYou
      -----END CERTIFICATE-----

    ssl_cert_key: |
      -----BEGIN RSA PRIVATE KEY-----
      ThisIsWhereThePrivateKeyGoes
      -----END RSA PRIVATE KEY-----
