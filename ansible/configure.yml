---
# Configuration at the server level, independent of the individual apps.
- name: Load secrets.
  hosts: all
  gather_facts: false
  tasks:
    - name: Load secrets.
      include_vars: "secrets.yml"
      tags: [ setup, localdev, staging, prod ]

- hosts: single:localdev
  remote_user: ubuntu
  roles:
    - role: ubuntu-initialized
      tags: [ setup ]

    # upgrade_packages=false will be overridden by the
    # Vagrantfile. But in general we don't want to upgrade Ubuntu
    # packages every time we run Ansible. The shocking truth is that
    # sometimes Ubuntu packages do not work out of the box, and you
    # don't want to casually upgrade them on your live
    # site. Horrors!
    - role: ubuntu-upgraded
      sudo: yes
      apt_cache_time: 14400
      upgrade_packages: false
      tags: [ setup ]

- name: Install the LAMP stack.
  hosts: single:localdev
  remote_user: ubuntu
  roles:
    - role: web
      sudo: yes
#      apache_servername: "{{ hostname }}.{{ servers[server_group].domain }}"
      tags: [ setup ]

    - role: Ansibles.mysql
      sudo: yes
      mysql_root_password: "{{ servers[server_group].mysql_root_password }}"
      tags: [ setup ]

  tasks:
    - name: Install deployment packages.
      sudo: yes
      apt: pkg={{ item }} state=installed
      with_items:
        - git
      tags: [ setup ]

    - name: Install composer.
      sudo: yes
      copy:
        src=files/composer.phar
        dest=/usr/local/bin/composer
        owner=ubuntu
        group=ubuntu
        mode=0555
      tags: [ setup ]

- name: Install additional development utilities.
  hosts: localdev
  remote_user: ubuntu
  vars:
    mysql_admin_user: root
    mysql_admin_password: "{{ servers[server_group].mysql_root_password }}"

  tasks:
    - name: Install useful development packages.
      sudo: yes
      apt: pkg={{item}} state=installed
      with_items:
        - curl
        - tmux
      tags: [ setup ]

    - name: Use a MySQL conf file to give the ubuntu user root access to MySQL.
      template: >-
        src="templates/my.cnf.j2"
        dest="/home/ubuntu/.my.cnf"
        owner=ubuntu
        group=ubuntu
        mode=0600
      tags: [ setup ]

- name: Deploy the localdev version of the app.
  hosts: localdev
  remote_user: ubuntu
  vars:
    app_name: puzzletron-localdev
    seeded_file_path: "/home/ubuntu/{{ app_name }}-SEEDED"
  roles:
    - role: site-deployed
      site: "{{ apps[app_name] }}"
      build_username: vagrant
      write_dotenv_file: true
      tags: [ localdev ]

  tasks:
    - name: Check to see if DB has been seeded.
      stat:
        path: "{{ seeded_file_path }}"
      register: seeded_file
      tags: [ localdev ]

    - name: Restore MySQL DB.
      sudo: yes
      mysql_db:
        name: "{{ apps[app_name].db_name }}"
        state: import
        target: "{{ apps[app_name].docroot }}/schema.sql"
      when: seeded_file.stat.exists == False
      tags: [ localdev ]

    - name: Clear old session files.
      sudo: yes
      shell: >-
        rm -f sess_*
        chdir={{ apps[app_name].shared_storage_dir }}/tmp
      when: seeded_file.stat.exists == False
      tags: [ localdev ]

    - name: Create a file to mark that we seeded the DB
      file: >-
        path="{{ seeded_file_path }}"
        state=touch
      when: seeded_file.stat.exists == False
      tags: [ localdev ]

- name: Deploy the staging version of the app.
  hosts: single:&prod
  remote_user: ubuntu
  vars:
    app_name: puzzletron-stg
  roles:
    - role: site-deployed
      site: "{{ apps[app_name] }}"
      dns_zone: "{{ servers[server_group].domain }}"
      when: apps[app_name] is defined
      tags: [ staging ]

- name: Deploy the production version of the app.
  hosts: single:&prod
  remote_user: ubuntu
  vars:
    app_name: puzzletron
  roles:
    - role: site-deployed
      site: "{{ apps[app_name] }}"
      dns_zone: "{{ servers[server_group].domain }}"
      when: apps[app_name] is defined
      tags: [ prod ]
