---
- name: Load secret config.
  hosts: all
  gather_facts: false
  tasks:
    - name: Load secret config.
      include_vars: "{{ secrets_path }}"
      tags: [ setup, build ]

- name: Provision all cluster resources.
  hosts: localhost
  gather_facts: false
  tasks:
    - name: Provision the backup bucket.
      cloudformation:
        stack_name: "{{ cluster_name }}-{{ stage_name }}-backup"
        state: "present"
        template: files/backup-bucket-cf.json
        template_parameters:
          Cluster: "{{ cluster_name }}"
          Zone: "{{ cluster_dns_zone }}"
          Stage: "{{ stage_name }}"
        tags:
          "Cluster": "{{ cluster_name }}"
          "Stage": "{{ stage_name }}"
      register: backup_stack

    - name: Print the bucket name.
      debug: msg="{{backup_stack.stack_outputs.BucketName}} is set"

    - name: Provision AWS security groups, roles, etc.
      cloudformation:
        stack_name: "{{ cluster_name }}-{{ stage_name }}-security"
        state: "present"
        template: files/security-cf.json
        template_parameters:
          Cluster: "{{ cluster_name }}"
          Stage: "{{ stage_name }}"
          BackupBucketName: "{{ backup_stack.stack_outputs.BucketName }}"
        tags:
          "Cluster": "{{ cluster_name }}"
          "Stage": "{{ stage_name }}"
      register: security_stack

    - name: Lookup an official Ubuntu image
      ec2_ami_search: distro=ubuntu release=trusty region={{ aws_region }} store=ebs virt=hvm
      register: ubuntu_image

    - name: Provision single instance.
      cloudformation:
        stack_name: "{{ cluster_name }}-{{ stage_name }}-single"
        state: "present"
        template: files/server-cf.json
        template_parameters:
          Cluster: "{{ cluster_name }}"
          Stage: "{{ stage_name }}"
          Hostname: "puzzletron"
          Class: "single"
          InstanceType: "t2.micro"
          AMI: "{{ ubuntu_image.ami }}"
          KeyName: "{{ aws_keypair }}"
          InstanceProfile: "{{ security_stack.stack_outputs.SingleInstanceProfile }}"
          SecurityGroupId: "{{ security_stack.stack_outputs.SingleSecurityGroupID }}"
          SiteUrl: "{{ site_url }}"
          StagingSiteUrl: "{{ staging_site_url }}"
          Zone: "{{ cluster_dns_zone }}"
        tags:
          "Cluster": "{{ cluster_name }}"
          "Stage": "{{ stage_name }}"
      register: single_stack

    - name: Wait for single SSH to come up
      wait_for:
        host="{{ single_stack.stack_outputs.PublicDnsName }}"
        port=22
        delay=2
        timeout=320
        state=started

    - name: Echo the name of the new single instance.
      debug: msg="Your single instance is ready - {{ single_stack.stack_outputs.PublicDnsName }} ({{ single_stack.stack_outputs.InstanceId }})"